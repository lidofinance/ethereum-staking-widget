/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface OracleV2AbiInterface extends ethers.utils.Interface {
  functions: {
    'getCurrentOraclesReportStatus()': FunctionFragment;
    'setAllowedBeaconBalanceAnnualRelativeIncrease(uint256)': FunctionFragment;
    'hasInitialized()': FunctionFragment;
    'getVersion()': FunctionFragment;
    'getEVMScriptExecutor(bytes)': FunctionFragment;
    'MANAGE_QUORUM()': FunctionFragment;
    'reportBeacon(uint256,uint64,uint32)': FunctionFragment;
    'getRecoveryVault()': FunctionFragment;
    'getAllowedBeaconBalanceAnnualRelativeIncrease()': FunctionFragment;
    'getAllowedBeaconBalanceRelativeDecrease()': FunctionFragment;
    'getExpectedEpochId()': FunctionFragment;
    'getLastCompletedReportDelta()': FunctionFragment;
    'getLido()': FunctionFragment;
    'SET_BEACON_REPORT_RECEIVER()': FunctionFragment;
    'MANAGE_MEMBERS()': FunctionFragment;
    'getCurrentFrame()': FunctionFragment;
    'allowRecoverability(address)': FunctionFragment;
    'getCurrentReportVariant(uint256)': FunctionFragment;
    'appId()': FunctionFragment;
    'getLastCompletedEpochId()': FunctionFragment;
    'getInitializationBlock()': FunctionFragment;
    'initialize_v2(uint256,uint256)': FunctionFragment;
    'setBeaconReportReceiver(address)': FunctionFragment;
    'transferToVault(address)': FunctionFragment;
    'SET_BEACON_SPEC()': FunctionFragment;
    'canPerform(address,bytes32,uint256[])': FunctionFragment;
    'getCurrentEpochId()': FunctionFragment;
    'getEVMScriptRegistry()': FunctionFragment;
    'addOracleMember(address)': FunctionFragment;
    'getBeaconReportReceiver()': FunctionFragment;
    'SET_REPORT_BOUNDARIES()': FunctionFragment;
    'setQuorum(uint256)': FunctionFragment;
    'getQuorum()': FunctionFragment;
    'kernel()': FunctionFragment;
    'getOracleMembers()': FunctionFragment;
    'isPetrified()': FunctionFragment;
    'setAllowedBeaconBalanceRelativeDecrease(uint256)': FunctionFragment;
    'getBeaconSpec()': FunctionFragment;
    'setBeaconSpec(uint64,uint64,uint64,uint64)': FunctionFragment;
    'MAX_MEMBERS()': FunctionFragment;
    'getCurrentReportVariantsSize()': FunctionFragment;
    'removeOracleMember(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'getCurrentOraclesReportStatus',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setAllowedBeaconBalanceAnnualRelativeIncrease',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getVersion',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getEVMScriptExecutor',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'MANAGE_QUORUM',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'reportBeacon',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllowedBeaconBalanceAnnualRelativeIncrease',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllowedBeaconBalanceRelativeDecrease',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getExpectedEpochId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCompletedReportDelta',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getLido', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'SET_BEACON_REPORT_RECEIVER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MANAGE_MEMBERS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentFrame',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentReportVariant',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'appId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getLastCompletedEpochId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize_v2',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBeaconReportReceiver',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'SET_BEACON_SPEC',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'canPerform',
    values: [string, BytesLike, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentEpochId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getEVMScriptRegistry',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'addOracleMember',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getBeaconReportReceiver',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'SET_REPORT_BOUNDARIES',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setQuorum',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getQuorum', values?: undefined): string;
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getOracleMembers',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setAllowedBeaconBalanceRelativeDecrease',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getBeaconSpec',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setBeaconSpec',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_MEMBERS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentReportVariantsSize',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeOracleMember',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'getCurrentOraclesReportStatus',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAllowedBeaconBalanceAnnualRelativeIncrease',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getVersion', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getEVMScriptExecutor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MANAGE_QUORUM',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'reportBeacon',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllowedBeaconBalanceAnnualRelativeIncrease',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllowedBeaconBalanceRelativeDecrease',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExpectedEpochId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCompletedReportDelta',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getLido', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'SET_BEACON_REPORT_RECEIVER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MANAGE_MEMBERS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentFrame',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentReportVariant',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCompletedEpochId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initialize_v2',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBeaconReportReceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'SET_BEACON_SPEC',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'canPerform', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentEpochId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEVMScriptRegistry',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addOracleMember',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBeaconReportReceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'SET_REPORT_BOUNDARIES',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setQuorum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getQuorum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getOracleMembers',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isPetrified',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAllowedBeaconBalanceRelativeDecrease',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBeaconSpec',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBeaconSpec',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_MEMBERS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentReportVariantsSize',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeOracleMember',
    data: BytesLike,
  ): Result;

  events: {
    'ScriptResult(address,bytes,bytes,bytes)': EventFragment;
    'RecoverToVault(address,address,uint256)': EventFragment;
    'AllowedBeaconBalanceAnnualRelativeIncreaseSet(uint256)': EventFragment;
    'AllowedBeaconBalanceRelativeDecreaseSet(uint256)': EventFragment;
    'BeaconReportReceiverSet(address)': EventFragment;
    'MemberAdded(address)': EventFragment;
    'MemberRemoved(address)': EventFragment;
    'QuorumChanged(uint256)': EventFragment;
    'ExpectedEpochIdUpdated(uint256)': EventFragment;
    'BeaconSpecSet(uint64,uint64,uint64,uint64)': EventFragment;
    'BeaconReported(uint256,uint128,uint128,address)': EventFragment;
    'Completed(uint256,uint128,uint128)': EventFragment;
    'PostTotalShares(uint256,uint256,uint256,uint256)': EventFragment;
    'ContractVersionSet(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ScriptResult'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RecoverToVault'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'AllowedBeaconBalanceAnnualRelativeIncreaseSet',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'AllowedBeaconBalanceRelativeDecreaseSet',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconReportReceiverSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MemberAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MemberRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuorumChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExpectedEpochIdUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconSpecSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconReported'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Completed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PostTotalShares'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ContractVersionSet'): EventFragment;
}

export class OracleV2Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OracleV2AbiInterface;

  functions: {
    getCurrentOraclesReportStatus(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    setAllowedBeaconBalanceAnnualRelativeIncrease(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    MANAGE_QUORUM(overrides?: CallOverrides): Promise<[string]>;

    reportBeacon(
      _epochId: BigNumberish,
      _beaconBalance: BigNumberish,
      _beaconValidators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    getAllowedBeaconBalanceAnnualRelativeIncrease(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAllowedBeaconBalanceRelativeDecrease(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getExpectedEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastCompletedReportDelta(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        postTotalPooledEther: BigNumber;
        preTotalPooledEther: BigNumber;
        timeElapsed: BigNumber;
      }
    >;

    getLido(overrides?: CallOverrides): Promise<[string]>;

    SET_BEACON_REPORT_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    MANAGE_MEMBERS(overrides?: CallOverrides): Promise<[string]>;

    getCurrentFrame(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        frameEpochId: BigNumber;
        frameStartTime: BigNumber;
        frameEndTime: BigNumber;
      }
    >;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    getCurrentReportVariant(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number] & {
        beaconBalance: BigNumber;
        beaconValidators: number;
        count: number;
      }
    >;

    appId(overrides?: CallOverrides): Promise<[string]>;

    getLastCompletedEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize_v2(
      _allowedBeaconBalanceAnnualRelativeIncrease: BigNumberish,
      _allowedBeaconBalanceRelativeDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBeaconReportReceiver(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    SET_BEACON_SPEC(overrides?: CallOverrides): Promise<[string]>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    addOracleMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getBeaconReportReceiver(overrides?: CallOverrides): Promise<[string]>;

    SET_REPORT_BOUNDARIES(overrides?: CallOverrides): Promise<[string]>;

    setQuorum(
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getQuorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    getOracleMembers(overrides?: CallOverrides): Promise<[string[]]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    setAllowedBeaconBalanceRelativeDecrease(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getBeaconSpec(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        epochsPerFrame: BigNumber;
        slotsPerEpoch: BigNumber;
        secondsPerSlot: BigNumber;
        genesisTime: BigNumber;
      }
    >;

    setBeaconSpec(
      _epochsPerFrame: BigNumberish,
      _slotsPerEpoch: BigNumberish,
      _secondsPerSlot: BigNumberish,
      _genesisTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    MAX_MEMBERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentReportVariantsSize(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    removeOracleMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  getCurrentOraclesReportStatus(overrides?: CallOverrides): Promise<BigNumber>;

  setAllowedBeaconBalanceAnnualRelativeIncrease(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  MANAGE_QUORUM(overrides?: CallOverrides): Promise<string>;

  reportBeacon(
    _epochId: BigNumberish,
    _beaconBalance: BigNumberish,
    _beaconValidators: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  getAllowedBeaconBalanceAnnualRelativeIncrease(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAllowedBeaconBalanceRelativeDecrease(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getExpectedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getLastCompletedReportDelta(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      postTotalPooledEther: BigNumber;
      preTotalPooledEther: BigNumber;
      timeElapsed: BigNumber;
    }
  >;

  getLido(overrides?: CallOverrides): Promise<string>;

  SET_BEACON_REPORT_RECEIVER(overrides?: CallOverrides): Promise<string>;

  MANAGE_MEMBERS(overrides?: CallOverrides): Promise<string>;

  getCurrentFrame(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      frameEpochId: BigNumber;
      frameStartTime: BigNumber;
      frameEndTime: BigNumber;
    }
  >;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  getCurrentReportVariant(
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, number, number] & {
      beaconBalance: BigNumber;
      beaconValidators: number;
      count: number;
    }
  >;

  appId(overrides?: CallOverrides): Promise<string>;

  getLastCompletedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  initialize_v2(
    _allowedBeaconBalanceAnnualRelativeIncrease: BigNumberish,
    _allowedBeaconBalanceRelativeDecrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBeaconReportReceiver(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  SET_BEACON_SPEC(overrides?: CallOverrides): Promise<string>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<boolean>;

  getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  addOracleMember(
    _member: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getBeaconReportReceiver(overrides?: CallOverrides): Promise<string>;

  SET_REPORT_BOUNDARIES(overrides?: CallOverrides): Promise<string>;

  setQuorum(
    _quorum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getQuorum(overrides?: CallOverrides): Promise<BigNumber>;

  kernel(overrides?: CallOverrides): Promise<string>;

  getOracleMembers(overrides?: CallOverrides): Promise<string[]>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  setAllowedBeaconBalanceRelativeDecrease(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getBeaconSpec(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      epochsPerFrame: BigNumber;
      slotsPerEpoch: BigNumber;
      secondsPerSlot: BigNumber;
      genesisTime: BigNumber;
    }
  >;

  setBeaconSpec(
    _epochsPerFrame: BigNumberish,
    _slotsPerEpoch: BigNumberish,
    _secondsPerSlot: BigNumberish,
    _genesisTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  MAX_MEMBERS(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentReportVariantsSize(overrides?: CallOverrides): Promise<BigNumber>;

  removeOracleMember(
    _member: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentOraclesReportStatus(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setAllowedBeaconBalanceAnnualRelativeIncrease(
      _value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    MANAGE_QUORUM(overrides?: CallOverrides): Promise<string>;

    reportBeacon(
      _epochId: BigNumberish,
      _beaconBalance: BigNumberish,
      _beaconValidators: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    getAllowedBeaconBalanceAnnualRelativeIncrease(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAllowedBeaconBalanceRelativeDecrease(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getExpectedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedReportDelta(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        postTotalPooledEther: BigNumber;
        preTotalPooledEther: BigNumber;
        timeElapsed: BigNumber;
      }
    >;

    getLido(overrides?: CallOverrides): Promise<string>;

    SET_BEACON_REPORT_RECEIVER(overrides?: CallOverrides): Promise<string>;

    MANAGE_MEMBERS(overrides?: CallOverrides): Promise<string>;

    getCurrentFrame(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        frameEpochId: BigNumber;
        frameStartTime: BigNumber;
        frameEndTime: BigNumber;
      }
    >;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getCurrentReportVariant(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, number, number] & {
        beaconBalance: BigNumber;
        beaconValidators: number;
        count: number;
      }
    >;

    appId(overrides?: CallOverrides): Promise<string>;

    getLastCompletedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialize_v2(
      _allowedBeaconBalanceAnnualRelativeIncrease: BigNumberish,
      _allowedBeaconBalanceRelativeDecrease: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBeaconReportReceiver(
      _addr: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    SET_BEACON_SPEC(overrides?: CallOverrides): Promise<string>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    addOracleMember(_member: string, overrides?: CallOverrides): Promise<void>;

    getBeaconReportReceiver(overrides?: CallOverrides): Promise<string>;

    SET_REPORT_BOUNDARIES(overrides?: CallOverrides): Promise<string>;

    setQuorum(_quorum: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<string>;

    getOracleMembers(overrides?: CallOverrides): Promise<string[]>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    setAllowedBeaconBalanceRelativeDecrease(
      _value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getBeaconSpec(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        epochsPerFrame: BigNumber;
        slotsPerEpoch: BigNumber;
        secondsPerSlot: BigNumber;
        genesisTime: BigNumber;
      }
    >;

    setBeaconSpec(
      _epochsPerFrame: BigNumberish,
      _slotsPerEpoch: BigNumberish,
      _secondsPerSlot: BigNumberish,
      _genesisTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    MAX_MEMBERS(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentReportVariantsSize(overrides?: CallOverrides): Promise<BigNumber>;

    removeOracleMember(
      _member: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null,
    ): TypedEventFilter<
      [string, string, string, string],
      { executor: string; script: string; input: string; returnData: string }
    >;

    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;

    AllowedBeaconBalanceAnnualRelativeIncreaseSet(
      value?: null,
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    AllowedBeaconBalanceRelativeDecreaseSet(
      value?: null,
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    BeaconReportReceiverSet(
      callback?: null,
    ): TypedEventFilter<[string], { callback: string }>;

    MemberAdded(member?: null): TypedEventFilter<[string], { member: string }>;

    MemberRemoved(
      member?: null,
    ): TypedEventFilter<[string], { member: string }>;

    QuorumChanged(
      quorum?: null,
    ): TypedEventFilter<[BigNumber], { quorum: BigNumber }>;

    ExpectedEpochIdUpdated(
      epochId?: null,
    ): TypedEventFilter<[BigNumber], { epochId: BigNumber }>;

    BeaconSpecSet(
      epochsPerFrame?: null,
      slotsPerEpoch?: null,
      secondsPerSlot?: null,
      genesisTime?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        epochsPerFrame: BigNumber;
        slotsPerEpoch: BigNumber;
        secondsPerSlot: BigNumber;
        genesisTime: BigNumber;
      }
    >;

    BeaconReported(
      epochId?: null,
      beaconBalance?: null,
      beaconValidators?: null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      {
        epochId: BigNumber;
        beaconBalance: BigNumber;
        beaconValidators: BigNumber;
        caller: string;
      }
    >;

    Completed(
      epochId?: null,
      beaconBalance?: null,
      beaconValidators?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        epochId: BigNumber;
        beaconBalance: BigNumber;
        beaconValidators: BigNumber;
      }
    >;

    PostTotalShares(
      postTotalPooledEther?: null,
      preTotalPooledEther?: null,
      timeElapsed?: null,
      totalShares?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        postTotalPooledEther: BigNumber;
        preTotalPooledEther: BigNumber;
        timeElapsed: BigNumber;
        totalShares: BigNumber;
      }
    >;

    ContractVersionSet(
      version?: null,
    ): TypedEventFilter<[BigNumber], { version: BigNumber }>;
  };

  estimateGas: {
    getCurrentOraclesReportStatus(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setAllowedBeaconBalanceAnnualRelativeIncrease(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    MANAGE_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    reportBeacon(
      _epochId: BigNumberish,
      _beaconBalance: BigNumberish,
      _beaconValidators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedBeaconBalanceAnnualRelativeIncrease(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAllowedBeaconBalanceRelativeDecrease(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getExpectedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedReportDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getLido(overrides?: CallOverrides): Promise<BigNumber>;

    SET_BEACON_REPORT_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGE_MEMBERS(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFrame(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentReportVariant(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialize_v2(
      _allowedBeaconBalanceAnnualRelativeIncrease: BigNumberish,
      _allowedBeaconBalanceRelativeDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBeaconReportReceiver(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    SET_BEACON_SPEC(overrides?: CallOverrides): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    addOracleMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getBeaconReportReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    SET_REPORT_BOUNDARIES(overrides?: CallOverrides): Promise<BigNumber>;

    setQuorum(
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleMembers(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowedBeaconBalanceRelativeDecrease(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getBeaconSpec(overrides?: CallOverrides): Promise<BigNumber>;

    setBeaconSpec(
      _epochsPerFrame: BigNumberish,
      _slotsPerEpoch: BigNumberish,
      _secondsPerSlot: BigNumberish,
      _genesisTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    MAX_MEMBERS(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentReportVariantsSize(overrides?: CallOverrides): Promise<BigNumber>;

    removeOracleMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentOraclesReportStatus(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setAllowedBeaconBalanceAnnualRelativeIncrease(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MANAGE_QUORUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportBeacon(
      _epochId: BigNumberish,
      _beaconBalance: BigNumberish,
      _beaconValidators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedBeaconBalanceAnnualRelativeIncrease(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAllowedBeaconBalanceRelativeDecrease(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getExpectedEpochId(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLastCompletedReportDelta(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLido(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SET_BEACON_REPORT_RECEIVER(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MANAGE_MEMBERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentFrame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentReportVariant(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastCompletedEpochId(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize_v2(
      _allowedBeaconBalanceAnnualRelativeIncrease: BigNumberish,
      _allowedBeaconBalanceRelativeDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBeaconReportReceiver(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    SET_BEACON_SPEC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentEpochId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addOracleMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getBeaconReportReceiver(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    SET_REPORT_BOUNDARIES(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setQuorum(
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getQuorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracleMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowedBeaconBalanceRelativeDecrease(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getBeaconSpec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBeaconSpec(
      _epochsPerFrame: BigNumberish,
      _slotsPerEpoch: BigNumberish,
      _secondsPerSlot: BigNumberish,
      _genesisTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    MAX_MEMBERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentReportVariantsSize(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeOracleMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
